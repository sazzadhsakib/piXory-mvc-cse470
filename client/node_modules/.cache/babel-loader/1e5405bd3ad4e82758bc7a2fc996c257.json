{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { imageUpload } from '../../utils/imageUpload';\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from './notifyAction';\nexport const POST_TYPES = {\n  CREATE_POST: 'CREATE_POST',\n  LOADING_POST: 'LOADING_POST',\n  GET_POSTS: 'GET_POSTS',\n  UPDATE_POST: 'UPDATE_POST',\n  GET_POST: 'GET_POST',\n  DELETE_POST: 'DELETE_POST'\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (images.length > 0) media = await imageUpload(images);\n    const res = await postDataAPI('posts', {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // Notify\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: 'added a new post.',\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('likePost', newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: 'like your post.',\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('unLikePost', newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: 'like your post.',\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // Notify\n\n    const msg = {\n      id: post._id,\n      text: 'added a new post.',\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","imageUpload","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { imageUpload } from '../../utils/imageUpload'\r\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\nimport { createNotify, removeNotify } from './notifyAction'\r\n\r\nexport const POST_TYPES = {\r\n    CREATE_POST: 'CREATE_POST',\r\n    LOADING_POST: 'LOADING_POST',\r\n    GET_POSTS: 'GET_POSTS',\r\n    UPDATE_POST: 'UPDATE_POST',\r\n    GET_POST: 'GET_POST',\r\n    DELETE_POST: 'DELETE_POST'\r\n}\r\n\r\n\r\nexport const createPost = ({content, images, auth, socket}) => async (dispatch) => {\r\n    let media = []\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n        if(images.length > 0) media = await imageUpload(images)\r\n\r\n        const res = await postDataAPI('posts', { content, images: media }, auth.token)\r\n\r\n        dispatch({ \r\n            type: POST_TYPES.CREATE_POST, \r\n            payload: {...res.data.newPost, user: auth.user} \r\n        })\r\n\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} })\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: res.data.newPost._id,\r\n            text: 'added a new post.',\r\n            recipients: res.data.newPost.user.followers,\r\n            url: `/post/${res.data.newPost._id}`,\r\n            content, \r\n            image: media[0].url\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: true })\r\n        const res = await getDataAPI('posts', token)\r\n        \r\n        dispatch({\r\n            type: POST_TYPES.GET_POSTS,\r\n            payload: {...res.data, page: 2}\r\n        })\r\n\r\n        dispatch({ type: POST_TYPES.LOADING_POST, payload: false })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const updatePost = ({content, images, auth, status}) => async (dispatch) => {\r\n    let media = []\r\n    const imgNewUrl = images.filter(img => !img.url)\r\n    const imgOldUrl = images.filter(img => img.url)\r\n\r\n    if(status.content === content \r\n        && imgNewUrl.length === 0\r\n        && imgOldUrl.length === status.images.length\r\n    ) return;\r\n\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n        if(imgNewUrl.length > 0) media = await imageUpload(imgNewUrl)\r\n\r\n        const res = await patchDataAPI(`post/${status._id}`, { \r\n            content, images: [...imgOldUrl, ...media] \r\n        }, auth.token)\r\n\r\n        dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost })\r\n\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {success: res.data.msg} })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const likePost = ({post, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, likes: [...post.likes, auth.user]}\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost})\r\n\r\n    socket.emit('likePost', newPost)\r\n\r\n    try {\r\n        await patchDataAPI(`post/${post._id}/like`, null, auth.token)\r\n        \r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'like your post.',\r\n            recipients: [post.user._id],\r\n            url: `/post/${post._id}`,\r\n            content: post.content, \r\n            image: post.images[0].url\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const unLikePost = ({post, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, likes: post.likes.filter(like => like._id !== auth.user._id)}\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost})\r\n\r\n    socket.emit('unLikePost', newPost)\r\n\r\n    try {\r\n        await patchDataAPI(`post/${post._id}/unlike`, null, auth.token)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'like your post.',\r\n            recipients: [post.user._id],\r\n            url: `/post/${post._id}`,\r\n        }\r\n        dispatch(removeNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const getPost = ({detailPost, id, auth}) => async (dispatch) => {\r\n    if(detailPost.every(post => post._id !== id)){\r\n        try {\r\n            const res = await getDataAPI(`post/${id}`, auth.token)\r\n            dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: GLOBALTYPES.ALERT,\r\n                payload: {error: err.response.data.msg}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const deletePost = ({post, auth, socket}) => async (dispatch) => {\r\n    dispatch({ type: POST_TYPES.DELETE_POST, payload: post })\r\n\r\n    try {\r\n        const res = await deleteDataAPI(`post/${post._id}`, auth.token)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: post._id,\r\n            text: 'added a new post.',\r\n            recipients: res.data.newPost.user.followers,\r\n            url: `/post/${post._id}`,\r\n        }\r\n        dispatch(removeNotify({msg, auth, socket}))\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const savePost = ({post, auth}) => async (dispatch) => {\r\n    const newUser = {...auth.user, saved: [...auth.user.saved, post._id]}\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}})\r\n\r\n    try {\r\n        await patchDataAPI(`savePost/${post._id}`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const unSavePost = ({post, auth}) => async (dispatch) => {\r\n    const newUser = {...auth.user, saved: auth.user.saved.filter(id => id !== post._id) }\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: {...auth, user: newUser}})\r\n\r\n    try {\r\n        await patchDataAPI(`unSavePost/${post._id}`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT,\r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}