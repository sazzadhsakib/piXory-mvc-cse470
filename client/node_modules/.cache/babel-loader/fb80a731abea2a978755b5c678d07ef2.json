{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\nimport { POST_TYPES } from './postAction';\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const createComment = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postDataAPI('comment', data, auth.token);\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    }); // Socket\n\n    socket.emit('createComment', newPost); // Notify\n\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = ({\n  comment,\n  post,\n  content,\n  auth\n}) => async dispatch => {\n  const newComments = EditData(post.comments, comment._id, { ...comment,\n    content\n  });\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    patchDataAPI(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  post,\n  comment,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n  const newPost = { ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n      const msg = {\n        id: item._id,\n        text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n        recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from './globalTypes'\r\nimport { POST_TYPES } from './postAction'\r\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\nimport { createNotify, removeNotify } from '../actions/notifyAction'\r\n\r\n\r\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, comments: [...post.comments, newComment]}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postDataAPI('comment', data, auth.token)\r\n\r\n        const newData = {...res.data.newComment, user: auth.user}\r\n        const newPost = {...post, comments: [...post.comments, newData]}\r\n        dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n        // Socket\r\n        socket.emit('createComment', newPost)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: res.data.newComment._id,\r\n            text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\r\n            recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n            url: `/post/${post._id}`,\r\n            content: post.content, \r\n            image: post.images[0].url\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n        \r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\r\n    const newComments = EditData(post.comments, comment._id, {...comment, content})\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n    try {\r\n        patchDataAPI(`comment/${comment._id}`, { content }, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const likeComment = ({comment, post, auth}) => async (dispatch) => {\r\n    const newComment = {...comment, likes: [...comment.likes, auth.user]}\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment)\r\n\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const unLikeComment = ({comment, post, auth}) => async (dispatch) => {\r\n\r\n    const newComment = {...comment, likes: DeleteData(comment.likes, auth.user._id)}\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment)\r\n\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const deleteComment = ({post, comment, auth, socket}) => async (dispatch) => {\r\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment]\r\n    \r\n    const newPost = {\r\n        ...post,\r\n        comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\r\n    }\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    socket.emit('deleteComment', newPost)\r\n    try {\r\n       deleteArr.forEach(item => {\r\n            deleteDataAPI(`comment/${item._id}`, auth.token)\r\n\r\n            const msg = {\r\n                id: item._id,\r\n                text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\r\n                recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n                url: `/post/${post._id}`,\r\n            }\r\n    \r\n            dispatch(removeNotify({msg, auth, socket}))\r\n       })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}