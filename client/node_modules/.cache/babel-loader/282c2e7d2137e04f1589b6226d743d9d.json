{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData';\nexport const NOTIFY_TYPES = {\n  GET_NOTIFIES: 'GET_NOTIFIES',\n  CREATE_NOTIFY: 'CREATE_NOTIFY',\n  REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n  UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n  UPDATE_SOUND: 'UPDATE_SOUND',\n  DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n};\nexport const createNotify = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    const res = await postDataAPI('notify', msg, auth.token);\n    socket.emit('createNotify', { ...res.data.notify,\n      user: {\n        username: auth.user.username,\n        avatar: auth.user.avatar\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const removeNotify = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  try {\n    await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token);\n    socket.emit('removeNotify', msg);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getNotifies = token => async dispatch => {\n  try {\n    const res = await getDataAPI('notifies', token);\n    dispatch({\n      type: NOTIFY_TYPES.GET_NOTIFIES,\n      payload: res.data.notifies\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const isReadNotify = ({\n  msg,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.UPDATE_NOTIFY,\n    payload: { ...msg,\n      isRead: true\n    }\n  });\n\n  try {\n    await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteAllNotifies = token => async dispatch => {\n  dispatch({\n    type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES,\n    payload: []\n  });\n\n  try {\n    await deleteDataAPI('deleteAllNotify', token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/notifyAction.js"],"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","msg","auth","socket","dispatch","res","token","emit","data","notify","user","username","avatar","err","type","ALERT","payload","error","response","removeNotify","id","url","getNotifies","notifies","isReadNotify","isRead","_id","deleteAllNotifies"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\r\n\r\nexport const NOTIFY_TYPES = {\r\n    GET_NOTIFIES: 'GET_NOTIFIES',\r\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\r\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\r\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\r\n    UPDATE_SOUND: 'UPDATE_SOUND',\r\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\r\n}\r\n\r\nexport const createNotify = ({msg, auth, socket}) => async (dispatch) => {\r\n    try {\r\n        const res = await postDataAPI('notify', msg, auth.token)\r\n\r\n        socket.emit('createNotify', {\r\n            ...res.data.notify,\r\n            user: {\r\n                username: auth.user.username,\r\n                avatar: auth.user.avatar\r\n            }\r\n        })\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const removeNotify = ({msg, auth, socket}) => async (dispatch) => {\r\n    try {\r\n        await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token)\r\n        \r\n        socket.emit('removeNotify', msg)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getNotifies = (token) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI('notifies', token)\r\n        \r\n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\n\r\nexport const isReadNotify = ({msg, auth}) => async (dispatch) => {\r\n    dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...msg, isRead: true}})\r\n    try {\r\n        await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteAllNotifies = (token) => async (dispatch) => {\r\n    dispatch({type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: []})\r\n    try {\r\n        await deleteDataAPI('deleteAllNotify', token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}