{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from './globalTypes';\nimport { getDataAPI, patchDataAPI } from '../../utils/fetchData';\nimport { imageUpload } from '../../utils/imageUpload';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const PROFILE_TYPES = {\n  LOADING: 'LOADING_PROFILE',\n  GET_USER: 'GET_PROFILE_USER',\n  FOLLOW: 'FOLLOW',\n  UNFOLLOW: 'UNFOLLOW',\n  GET_ID: 'GET_PROFILE_ID',\n  GET_POSTS: 'GET_PROFILE_POSTS',\n  UPDATE_POST: 'UPDATE_PROFILE_POST'\n};\nexport const getProfileUsers = ({\n  id,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: PROFILE_TYPES.GET_ID,\n    payload: id\n  });\n\n  try {\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: true\n    });\n    const res = getDataAPI(`/user/${id}`, auth.token);\n    const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n    const users = await res;\n    const posts = await res1;\n    dispatch({\n      type: PROFILE_TYPES.GET_USER,\n      payload: users.data\n    });\n    dispatch({\n      type: PROFILE_TYPES.GET_POSTS,\n      payload: { ...posts.data,\n        _id: id,\n        page: 2\n      }\n    });\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Please add your full name.\"\n    }\n  });\n  if (userData.fullname.length > 25) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Your full name too long.\"\n    }\n  });\n  if (userData.story.length > 200) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: {\n      error: \"Your story too long.\"\n    }\n  });\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    if (avatar) media = await imageUpload([avatar]);\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const follow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: [...user.followers, auth.user]\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: [...item.followers, auth.user]\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.FOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: [...auth.user.following, newUser]\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n    socket.emit('follow', res.data.newUser); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: 'has started to follow you.',\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unfollow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: DeleteData(user.followers, auth.user._id)\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: DeleteData(item.followers, auth.user._id)\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.UNFOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: DeleteData(auth.user.following, newUser._id)\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n    socket.emit('unFollow', res.data.newUser); // Notify\n\n    const msg = {\n      id: auth.user._id,\n      text: 'has started to follow you.',\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","DeleteData","getDataAPI","patchDataAPI","imageUpload","createNotify","removeNotify","PROFILE_TYPES","LOADING","GET_USER","FOLLOW","UNFOLLOW","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","follow","socket","newUser","every","item","followers","forEach","following","emit","text","recipients","unfollow"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from './globalTypes'\r\nimport { getDataAPI, patchDataAPI } from '../../utils/fetchData'\r\nimport { imageUpload } from '../../utils/imageUpload'\r\nimport { createNotify, removeNotify } from '../actions/notifyAction'\r\n\r\n\r\nexport const PROFILE_TYPES = {\r\n    LOADING: 'LOADING_PROFILE',\r\n    GET_USER: 'GET_PROFILE_USER',\r\n    FOLLOW: 'FOLLOW',\r\n    UNFOLLOW: 'UNFOLLOW',\r\n    GET_ID: 'GET_PROFILE_ID',\r\n    GET_POSTS: 'GET_PROFILE_POSTS',\r\n    UPDATE_POST: 'UPDATE_PROFILE_POST'\r\n}\r\n\r\n\r\nexport const getProfileUsers = ({id, auth}) => async (dispatch) => {\r\n    dispatch({type: PROFILE_TYPES.GET_ID, payload: id})\r\n\r\n    try {\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: true})\r\n        const res = getDataAPI(`/user/${id}`, auth.token)\r\n        const res1 = getDataAPI(`/user_posts/${id}`, auth.token)\r\n        \r\n        const users = await res;\r\n        const posts = await res1;\r\n\r\n        dispatch({\r\n            type: PROFILE_TYPES.GET_USER,\r\n            payload: users.data\r\n        })\r\n\r\n        dispatch({\r\n            type: PROFILE_TYPES.GET_POSTS,\r\n            payload: {...posts.data, _id: id, page: 2}\r\n        })\r\n\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: false})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const updateProfileUser = ({userData, avatar, auth}) => async (dispatch) => {\r\n    if(!userData.fullname)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please add your full name.\"}})\r\n\r\n    if(userData.fullname.length > 25)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your full name too long.\"}})\r\n\r\n    if(userData.story.length > 200)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your story too long.\"}})\r\n\r\n    try {\r\n        let media;\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        if(avatar) media = await imageUpload([avatar])\r\n\r\n        const res = await patchDataAPI(\"user\", {\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar\r\n        }, auth.token)\r\n\r\n        dispatch({\r\n            type: GLOBALTYPES.AUTH,\r\n            payload: {\r\n                ...auth,\r\n                user: {\r\n                    ...auth.user, ...userData,\r\n                    avatar: avatar ? media[0].url : auth.user.avatar,\r\n                }\r\n            }\r\n        })\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {success: res.data.msg}})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = ({users, user, auth, socket}) => async (dispatch) => {\r\n    let newUser;\r\n    \r\n    if(users.every(item => item._id !== user._id)){\r\n        newUser = {...user, followers: [...user.followers, auth.user]}\r\n    }else{\r\n        users.forEach(item => {\r\n            if(item._id === user._id){\r\n                newUser = {...item, followers: [...item.followers, auth.user]}\r\n            }\r\n        })\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.FOLLOW, payload: newUser })\r\n\r\n    dispatch({\r\n        type: GLOBALTYPES.AUTH, \r\n        payload: {\r\n            ...auth,\r\n            user: {...auth.user, following: [...auth.user.following, newUser]}\r\n        }\r\n    })\r\n\r\n\r\n    try {\r\n        const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token)\r\n        socket.emit('follow', res.data.newUser)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'has started to follow you.',\r\n            recipients: [newUser._id],\r\n            url: `/profile/${auth.user._id}`,\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const unfollow = ({users, user, auth, socket}) => async (dispatch) => {\r\n\r\n    let newUser;\r\n\r\n    if(users.every(item => item._id !== user._id)){\r\n        newUser = {...user, followers: DeleteData(user.followers, auth.user._id)}\r\n    }else{\r\n        users.forEach(item => {\r\n            if(item._id === user._id){\r\n                newUser = {...item, followers: DeleteData(item.followers, auth.user._id)}\r\n            }\r\n        })\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.UNFOLLOW, payload: newUser })\r\n\r\n    dispatch({\r\n        type: GLOBALTYPES.AUTH, \r\n        payload: {\r\n            ...auth,\r\n            user: { \r\n                ...auth.user, \r\n                following: DeleteData(auth.user.following, newUser._id) \r\n            }\r\n        }\r\n    })\r\n   \r\n\r\n    try {\r\n        const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token)\r\n        socket.emit('unFollow', res.data.newUser)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'has started to follow you.',\r\n            recipients: [newUser._id],\r\n            url: `/profile/${auth.user._id}`,\r\n        }\r\n\r\n        dispatch(removeNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}