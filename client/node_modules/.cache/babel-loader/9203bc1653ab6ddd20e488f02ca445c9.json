{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { postDataAPI } from '../../utils/fetchData';\nimport valid from '../../utils/valid';\nexport const login = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('login', data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n\n  if (firstLogin) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    try {\n      const res = await postDataAPI('refresh_token');\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          token: res.data.access_token,\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const register = data => async dispatch => {\n  const check = valid(data);\n  if (check.errLength > 0) return dispatch({\n    type: GLOBALTYPES.ALERT,\n    payload: check.errMsg\n  });\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('register', data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    localStorage.removeItem('firstLogin');\n    await postDataAPI('logout');\n    window.location.href = \"/\";\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/authAction.js"],"names":["GLOBALTYPES","postDataAPI","valid","login","data","dispatch","type","ALERT","payload","loading","res","AUTH","token","access_token","user","localStorage","setItem","success","msg","err","error","response","refreshToken","firstLogin","getItem","register","check","errLength","errMsg","logout","removeItem","window","location","href"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\r\nimport { postDataAPI } from '../../utils/fetchData'\r\nimport valid from '../../utils/valid'\r\n\r\n\r\nexport const login = (data) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n        const res = await postDataAPI('login', data)\r\n        dispatch({ \r\n            type: GLOBALTYPES.AUTH, \r\n            payload: {\r\n                token: res.data.access_token,\r\n                user: res.data.user\r\n            } \r\n        })\r\n\r\n        localStorage.setItem(\"firstLogin\", true)\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                success: res.data.msg\r\n            } \r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const refreshToken = () => async (dispatch) => {\r\n    const firstLogin = localStorage.getItem(\"firstLogin\")\r\n    if(firstLogin){\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} })\r\n\r\n        try {\r\n            const res = await postDataAPI('refresh_token')\r\n            dispatch({ \r\n                type: GLOBALTYPES.AUTH, \r\n                payload: {\r\n                    token: res.data.access_token,\r\n                    user: res.data.user\r\n                } \r\n            })\r\n\r\n            dispatch({ type: GLOBALTYPES.ALERT, payload: {} })\r\n\r\n        } catch (err) {\r\n            dispatch({ \r\n                type: GLOBALTYPES.ALERT, \r\n                payload: {\r\n                    error: err.response.data.msg\r\n                } \r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (data) => async (dispatch) => {\r\n    const check = valid(data)\r\n    if(check.errLength > 0)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: check.errMsg})\r\n\r\n    try {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        const res = await postDataAPI('register', data)\r\n        dispatch({ \r\n            type: GLOBALTYPES.AUTH, \r\n            payload: {\r\n                token: res.data.access_token,\r\n                user: res.data.user\r\n            } \r\n        })\r\n\r\n        localStorage.setItem(\"firstLogin\", true)\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                success: res.data.msg\r\n            } \r\n        })\r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    try {\r\n        localStorage.removeItem('firstLogin')\r\n        await postDataAPI('logout')\r\n        window.location.href = \"/\"\r\n    } catch (err) {\r\n        dispatch({ \r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {\r\n                error: err.response.data.msg\r\n            } \r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}