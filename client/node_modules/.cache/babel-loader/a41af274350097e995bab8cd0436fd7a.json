{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from '../actions/globalTypes';\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData';\nexport const MESS_TYPES = {\n  ADD_USER: 'ADD_USER',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n  GET_MESSAGES: 'GET_MESSAGES',\n  UPDATE_MESSAGES: 'UPDATE_MESSAGES',\n  DELETE_MESSAGES: 'DELETE_MESSAGES',\n  DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n  CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\n};\nexport const addMessage = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: MESS_TYPES.ADD_MESSAGE,\n    payload: msg\n  });\n  const {\n    _id,\n    avatar,\n    fullname,\n    username\n  } = auth.user;\n  socket.emit('addMessage', { ...msg,\n    user: {\n      _id,\n      avatar,\n      fullname,\n      username\n    }\n  });\n\n  try {\n    await postDataAPI('message', msg, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n    let newArr = [];\n    res.data.conversations.forEach(item => {\n      item.recipients.forEach(cv => {\n        if (cv._id !== auth.user._id) {\n          newArr.push({ ...cv,\n            text: item.text,\n            media: item.media,\n            call: item.call\n          });\n        }\n      });\n    });\n    dispatch({\n      type: MESS_TYPES.GET_CONVERSATIONS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getMessages = ({\n  auth,\n  id,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n    const newData = { ...res.data,\n      messages: res.data.messages.reverse()\n    };\n    dispatch({\n      type: MESS_TYPES.GET_MESSAGES,\n      payload: { ...newData,\n        _id: id,\n        page\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const loadMoreMessages = ({\n  auth,\n  id,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n    const newData = { ...res.data,\n      messages: res.data.messages.reverse()\n    };\n    dispatch({\n      type: MESS_TYPES.UPDATE_MESSAGES,\n      payload: { ...newData,\n        _id: id,\n        page\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteMessages = ({\n  msg,\n  data,\n  auth\n}) => async dispatch => {\n  const newData = DeleteData(data, msg._id);\n  dispatch({\n    type: MESS_TYPES.DELETE_MESSAGES,\n    payload: {\n      newData,\n      _id: msg.recipient\n    }\n  });\n\n  try {\n    await deleteDataAPI(`message/${msg._id}`, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteConversation = ({\n  auth,\n  id\n}) => async dispatch => {\n  dispatch({\n    type: MESS_TYPES.DELETE_CONVERSATION,\n    payload: id\n  });\n\n  try {\n    await deleteDataAPI(`conversation/${id}`, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:/MERN-Stack-Build-a-social-media-app/client/src/redux/actions/messageAction.js"],"names":["GLOBALTYPES","DeleteData","postDataAPI","getDataAPI","deleteDataAPI","MESS_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","addMessage","msg","auth","socket","dispatch","type","payload","_id","avatar","fullname","username","user","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","item","recipients","cv","push","text","media","call","result","getMessages","id","newData","messages","reverse","loadMoreMessages","deleteMessages","recipient","deleteConversation"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from '../actions/globalTypes'\r\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\n\r\nexport const MESS_TYPES = {\r\n    ADD_USER: 'ADD_USER',\r\n    ADD_MESSAGE: 'ADD_MESSAGE',\r\n    GET_CONVERSATIONS: 'GET_CONVERSATIONS',\r\n    GET_MESSAGES: 'GET_MESSAGES',\r\n    UPDATE_MESSAGES: 'UPDATE_MESSAGES',\r\n    DELETE_MESSAGES: 'DELETE_MESSAGES',\r\n    DELETE_CONVERSATION: 'DELETE_CONVERSATION',\r\n    CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\r\n}\r\n\r\n\r\n\r\nexport const addMessage = ({msg, auth, socket}) => async (dispatch) =>{\r\n    dispatch({type: MESS_TYPES.ADD_MESSAGE, payload: msg})\r\n\r\n    const { _id, avatar, fullname, username } = auth.user\r\n    socket.emit('addMessage', {...msg, user: { _id, avatar, fullname, username } })\r\n    \r\n    try {\r\n        await postDataAPI('message', msg, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token)\r\n        \r\n        let newArr = [];\r\n        res.data.conversations.forEach(item => {\r\n            item.recipients.forEach(cv => {\r\n                if(cv._id !== auth.user._id){\r\n                    newArr.push({...cv, text: item.text, media: item.media, call: item.call})\r\n                }\r\n            })\r\n        })\r\n\r\n        dispatch({\r\n            type: MESS_TYPES.GET_CONVERSATIONS, \r\n            payload: {newArr, result: res.data.result}\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getMessages = ({auth, id, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = {...res.data, messages: res.data.messages.reverse()}\r\n\r\n        dispatch({type: MESS_TYPES.GET_MESSAGES, payload: {...newData, _id: id, page}})\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const loadMoreMessages = ({auth, id, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = {...res.data, messages: res.data.messages.reverse()}\r\n\r\n        dispatch({type: MESS_TYPES.UPDATE_MESSAGES, payload: {...newData, _id: id, page}})\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteMessages = ({msg, data, auth}) => async (dispatch) => {\r\n    const newData = DeleteData(data, msg._id)\r\n    dispatch({type: MESS_TYPES.DELETE_MESSAGES, payload: {newData, _id: msg.recipient}})\r\n    try {\r\n        await deleteDataAPI(`message/${msg._id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteConversation = ({auth, id}) => async (dispatch) => {\r\n    dispatch({type: MESS_TYPES.DELETE_CONVERSATION, payload: id})\r\n    try {\r\n        await deleteDataAPI(`conversation/${id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}